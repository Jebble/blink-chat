{"version":3,"sources":["ts/recoil/atoms.ts","ts/components/ConversationItem.tsx","ts/recoil/selectors.ts","ts/components/Sidebar.tsx","ts/components/MessageInput.tsx","ts/components/Conversation.tsx","ts/components/Chat.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["conversationIdsState","atom","key","default","conversationState","atomFamily","currentConversationState","dayjs","extend","isToday","ConversationItem","id","conversation","useRecoilValue","useRecoilState","currentConversationId","setCurrentConversationId","lastUpdated","last_updated","className","onClick","name","messages","length","text","format","sortedConversationsState","selector","get","conversations","map","sort","a","b","Date","getTime","Sidebar","ConversationsList","items","MessageInput","useState","message","setMessage","handleMessageSubmit","useRecoilCallback","set","e","preventDefault","currentDateTime","toString","uuid","onSubmit","type","placeholder","value","onChange","target","disabled","Conversation","scrollableNodeRef","useRef","useEffect","current","scrollTop","scrollHeight","scrollableNodeProps","ref","timestamp","getTimestamp","Chat","App","initializeState","data","forEach","sortedMessages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bd522e6f.chunk.js","sourcesContent":["import { atom, atomFamily, SerializableParam } from 'recoil';\nimport { ConversationProps } from '../types';\n\nexport const conversationIdsState = atom<string[]>({\n\tkey: 'conversationsList',\n\tdefault: []\n});\n\nexport const conversationState = atomFamily<ConversationProps, SerializableParam>({\n\tkey: 'conversation',\n\tdefault: {} as ConversationProps\n});\n\nexport const currentConversationState = atom<string | null>({\n\tkey: 'currentConversationState',\n\tdefault: null\n});","import React from 'react';\nimport { useRecoilValue, useRecoilState } from 'recoil';\nimport dayjs from 'dayjs';\nimport isToday from 'dayjs/plugin/isToday';\nimport { conversationState, currentConversationState } from '../recoil/atoms';\n\ndayjs.extend(isToday);\n\nconst ConversationItem: React.FC<{id: string}> = ({id}) => {\n\n\tconst conversation = useRecoilValue(conversationState(id));\n\tconst [currentConversationId, setCurrentConversationId] = useRecoilState(currentConversationState);\n\tconst lastUpdated = dayjs(conversation.last_updated);\n\n\tconst handleOnConversationClick = () => {\n\t\tif (currentConversationId === conversation.id) return null;\n\t\tsetCurrentConversationId(conversation.id);\n\t}\n\n\treturn (\n\t\t<button\n\t\t\tclassName={`conversation${currentConversationId === conversation.id ? ' active' : ''}`}\n\t\t\tonClick={handleOnConversationClick}\n\t\t>\n\t\t\t<h2>{conversation.name}</h2>\n\t\t\t<p>{conversation.messages[conversation.messages.length - 1].text}</p>\n\t\t\t<span className=\"time\">\n\t\t\t\t{lastUpdated.isToday() ?\n\t\t\t\t\tlastUpdated.format('HH:mm')\n\t\t\t\t:\n\t\t\t\t\tlastUpdated.format('D MMM YYYY')\n\t\t\t\t}\n\t\t\t</span>\n\t\t</button>\n\t);\n}\n\nexport default ConversationItem;","import { selector } from 'recoil';\nimport { ConversationProps } from '../types';\nimport { conversationIdsState, conversationState } from './atoms';\n\nexport const sortedConversationsState = selector<ConversationProps[]>({\n\tkey: 'sortedConversationsList',\n\tget: ({get}) => {\n\t\tconst conversationIds = get(conversationIdsState);\n\t\tconst conversations = conversationIds.map( id =>\n\t\t\tget(conversationState(id))\n\t\t);\n\t\treturn [...conversations].sort((a, b) => {\n\t\t\treturn new Date(b.last_updated).getTime() - new Date(a.last_updated).getTime();\n\t\t});\n\t}\n});","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport ConversationItem from './ConversationItem';\nimport { sortedConversationsState } from '../recoil/selectors';\nimport SimpleBarReact from 'simplebar-react';\n\nconst Sidebar: React.FC = () => {\n\n\tconst conversations = useRecoilValue(sortedConversationsState);\n\n\t/**\n\t * Sort conversations by last_updated\n\t * @return ConversationItem[]\n\t */\n\tconst ConversationsList: React.FC = () => {\n\t\tconst items = conversations.map( conversation => {\n\t\t\treturn (\n\t\t\t<ConversationItem\n\t\t\t\t\tkey={conversation.id}\n\t\t\t\t\tid={conversation.id}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\n\t\treturn <>{items}</>;\n\t}\n\n\treturn (\n\t\t<div className=\"sidebar\">\n\t\t\t<SimpleBarReact className=\"conversations-list\">\n\t\t\t\t<ConversationsList />\n\t\t\t</SimpleBarReact>\n\t\t</div>\n\t);\n}\n\nexport default Sidebar;","import React, { useState } from 'react';\nimport { useRecoilValue, useRecoilCallback } from 'recoil';\nimport { v4 as uuid} from 'uuid';\nimport { currentConversationState, conversationState } from '../recoil/atoms';\nimport { ConversationProps } from '../types';\n\nconst MessageInput: React.FC = () => {\n\n\tconst currentConversationId = useRecoilValue<string | null>(currentConversationState);\n\tconst conversation = useRecoilValue<ConversationProps>(conversationState(currentConversationId));\n\tconst [message, setMessage] = useState<string>('');\n\n\tconst handleMessageSubmit = useRecoilCallback(({set}) => {\n\t\treturn (e: React.FormEvent) => {\n\t\t\te.preventDefault();\n\n\t\t\tconst currentDateTime = new Date().toString();\n\t\t\tset(conversationState(currentConversationId), {\n\t\t\t\t...conversation,\n\t\t\t\tlast_updated: currentDateTime,\n\t\t\t\tmessages: [...conversation.messages, {\n\t\t\t\t\tid: uuid(),\n\t\t\t\t\ttext: message,\n\t\t\t\t\tlast_updated: currentDateTime\n\t\t\t\t}]\n\t\t\t});\n\t\t\tsetMessage('');\n\t\t}\n\t});\n\n\treturn (\n\t\t<div className=\"input-wrapper\">\n\t\t\t<form onSubmit={handleMessageSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tkey=\"input-wrapper-key\"\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tplaceholder=\"Type a message\"\n\t\t\t\t\tvalue={message}\n\t\t\t\t\tonChange={ e => setMessage(e.target.value) }\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tdisabled={!message}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default MessageInput;","import React, { useEffect, useRef } from 'react'\nimport dayjs from 'dayjs';\nimport isToday from 'dayjs/plugin/isToday';\nimport { useRecoilValue } from 'recoil';\nimport SimpleBarReact from 'simplebar-react';\nimport 'simplebar-react/dist/simplebar.min.css';\nimport { currentConversationState, conversationState } from '../recoil/atoms';\nimport { ConversationProps } from '../types';\nimport MessageInput from './MessageInput';\n\ndayjs.extend(isToday);\n\nconst Conversation: React.FC = () => {\n\n\tconst currentConversationId = useRecoilValue<string | null>(currentConversationState);\n\tconst conversation = useRecoilValue<ConversationProps>(conversationState(currentConversationId));\n\tconst scrollableNodeRef = useRef<HTMLDivElement>();\n\n\t// Scroll chat to bottom on load and new messages\n\tuseEffect(() => {\n\t\tif (scrollableNodeRef.current) {\n\t\t\tscrollableNodeRef.current.scrollTop = scrollableNodeRef.current.scrollHeight;\n\t\t}\n\t}, [conversation]);\n\n\tconst getTimestamp: (timestamp: string) => string = (timestamp) => {\n\t\tconst lastUpdated = dayjs(timestamp);\n\t\tif (lastUpdated.isToday()) {\n\t\t\treturn lastUpdated.format('HH:mm:ss');\n\t\t}\n\n\t\treturn lastUpdated.format('dddd DD-MM-YYYY HH:mm:ss');\n\n\t}\n\n\treturn (<>\n\t\t<SimpleBarReact\n\t\t\tclassName=\"messages\"\n\t\t\tscrollableNodeProps={{\n\t\t\t\tref: scrollableNodeRef,\n\t\t\t}}\n\t\t>\n\t\t\t{conversation.messages.map( message => {\n\t\t\t\treturn (\n\t\t\t\t\t<div key={message.id} className=\"message\">\n\t\t\t\t\t\t<div className=\"time\">\n\t\t\t\t\t\t\t{getTimestamp(message.last_updated)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p>{message.text}</p>\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</SimpleBarReact>\n\n\t\t<MessageInput />\n\t</>);\n}\n\nexport default Conversation;","import React from 'react'\nimport { useRecoilValue } from 'recoil';\nimport { currentConversationState } from '../recoil/atoms';\nimport Conversation from './Conversation';\n\nconst Chat: React.FC = () => {\n\n\tconst currentConversationId = useRecoilValue(currentConversationState);\n\n\treturn (\n\t\t<div className=\"chat\">\n\t\t\t{currentConversationId ? (\n\t\t\t\t<Conversation />\n\t\t\t) : (\n\t\t\t\t<div className=\"no-conversation-indicator\">\n\t\t\t\t\tSelect a conversation from the list.\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default Chat;","import  './app.scss';\nimport React from 'react';\nimport { RecoilRoot, MutableSnapshot } from 'recoil';\nimport data from './data.json';\nimport { conversationIdsState, conversationState } from './ts/recoil/atoms';\nimport Sidebar from './ts/components/Sidebar';\nimport Chat from './ts/components/Chat';\n\nconst App = () => {\n\n\t/**\n\t * Initialize Recoil state from data.json\n\t * @param set Recoil setter to set Atoms/Selectors\n\t */\n\tconst initializeState = ({set}: MutableSnapshot) => {\n\n\t\t// Set the conversationList Atom\n\t\tset(conversationIdsState, () => data.map(conversation => conversation.id));\n\n\t\t// Set Recoil Atom for every conversation.\n\t\tdata.forEach(conversation => {\n\t\t\tset(conversationState(conversation.id), () => {\n\t\t\t\tconst sortedMessages = [...conversation.messages].sort((a,b) => {\n\t\t\t\t\treturn new Date(a.last_updated).getTime() - new Date(b.last_updated).getTime();\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\t...conversation,\n\t\t\t\t\tmessages: sortedMessages\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<RecoilRoot initializeState={initializeState}>\n\t\t\t\t<Sidebar />\n\t\t\t\t<Chat />\n\t\t\t</RecoilRoot>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}